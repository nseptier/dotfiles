return {
  -- 'hrsh7th/nvim-cmp',
  -- event = 'InsertEnter',
  -- dependencies = {
  --   'hrsh7th/cmp-nvim-lsp',
  --   'hrsh7th/cmp-nvim-lua',
  --   'hrsh7th/cmp-path',
  --   'hrsh7th/cmp-cmdline',
  -- },
  -- config = function()
  --   -- Set up nvim-cmp.
  --   local cmp = require 'cmp'
  --
  --   -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
  --   cmp.setup.cmdline({ '/', '?' }, {
  --     mapping = cmp.mapping.preset.cmdline(),
  --     sources = {
  --       { name = 'buffer' }
  --     }
  --   })
  --
  --   -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  --   cmp.setup.cmdline(':', {
  --     mapping = cmp.mapping.preset.cmdline(),
  --     sources = cmp.config.sources({
  --       { name = 'path' }
  --     }, {
  --       { name = 'cmdline' }
  --     }),
  --     matching = { disallow_symbol_nonprefix_matching = false }
  --   })
  --
  --   -- And you can configure cmp even more, if you want to.
  --   local luasnip = require('luasnip')
  --
  --   -- luasnip.filetype_extend("typescriptreact", { "html" })
  --   -- luasnip.filetype_extend("vue", { "html" })
  --   require("luasnip/loaders/from_vscode").lazy_load()
  --
  --   local has_words_before = function()
  --     unpack = unpack or table.unpack
  --     local line, col = unpack(vim.api.nvim_win_get_cursor(0))
  --     return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
  --   end
  --
  --   cmp.setup({
  --     experimental = {
  --       ghost_text = true -- this feature conflict with copilot.vim's preview.
  --     },
  --     mapping = cmp.mapping.preset.insert({
  --       ['<C-Space>'] = cmp.mapping.complete(),
  --       ['<C-u>'] = cmp.mapping.scroll_docs(-4),
  --       ['<C-d>'] = cmp.mapping.scroll_docs(4),
  --
  --       -- ['<C-f>'] = luasnip.jump(1),
  --       -- ['<C-b>'] = luasnip.jump(-1),
  --
  --       -- vim.keymap.set({"i", "s"}, "<C-L>", function() ls.jump( 1) end, {silent = true})
  --       -- vim.keymap.set({"i", "s"}, "<C-J>",
  --
  --       -- vim.keymap.set({"i", "s"}, "<C-E>", function()
  --       -- 	if ls.choice_active() then
  --       -- 		ls.change_choice(1)
  --       -- 	end
  --       -- end, {silent = true})
  --
  --       ['<CR>'] = cmp.mapping.confirm({ select = true }),
  --       ["<Tab>"] = cmp.mapping(function(fallback)
  --         if cmp.visible() then
  --           cmp.select_next_item()
  --           -- You could replace the expand_or_jumpable() calls with expand_or_locally_jumpable()
  --           -- that way you will only jump inside the snippet region
  --         elseif luasnip.expand_or_jumpable() then
  --           luasnip.expand_or_jump()
  --         elseif has_words_before() then
  --           cmp.complete()
  --         else
  --           fallback()
  --         end
  --       end, { "i", "s" }),
  --
  --       ["<S-Tab>"] = cmp.mapping(function(fallback)
  --         if cmp.visible() then
  --           cmp.select_prev_item()
  --         elseif luasnip.jumpable(-1) then
  --           luasnip.jump(-1)
  --         else
  --           fallback()
  --         end
  --       end, { "i", "s" }),
  --
  --       -- vim.keymap.set({"i"}, "<C-K>", function() ls.expand() end, {silent = true})
  --       -- vim.keymap.set({"i", "s"}, "<C-L>", function() ls.jump( 1) end, {silent = true})
  --       -- vim.keymap.set({"i", "s"}, "<C-J>", function() ls.jump(-1) end, {silent = true})
  --
  --       -- vim.keymap.set({"i", "s"}, "<C-E>", function()
  --       --   if ls.choice_active() then
  --       --     ls.change_choice(1)
  --       --   end
  --       -- end, {silent = true})
  --     }),
  --     snippet = {
  --       expand = function(args)
  --         luasnip.lsp_expand(args.body)
  --       end,
  --     },
  --     window = {
  --       completion = vim.tbl_extend("force", cmp.config.window.bordered(), {
  --         winhighlight = "NormalFloat:NormalFloat,FloatBorder:FloatBorder,CursorLine:PmenuSel,Search:None",
  --       }),
  --       documentation = vim.tbl_extend("force", cmp.config.window.bordered(), {
  --         winhighlight = "NormalFloat:NormalFloat,FloatBorder:FloatBorder,CursorLine:PmenuSel,Search:None",
  --       }),
  --       -- completion = cmp.config.window.bordered(),
  --       -- documentation = cmp.config.window.bordered(),
  --     },
  --     sources = cmp.config.sources({
  --       { name = 'nvim_lsp' },
  --       { name = 'nvim_lua' },
  --       -- { name = 'luasnip' },
  --       -- { name = 'buffer' },
  --     })
  --   })
  -- end
}
