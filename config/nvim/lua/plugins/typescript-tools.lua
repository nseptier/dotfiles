return {
  -- "pmizio/typescript-tools.nvim",
  -- event = { 'BufReadPre', 'BufNewFile' },
  -- dependencies = { "nvim-lua/plenary.nvim", "neovim/nvim-lspconfig" },
  -- opts = {
  --
  --   filetypes = {
  --     "javascript",
  --     "javascriptreact",
  --     "javascript.jsx",
  --     "typescript",
  --     "typescriptreact",
  --     "typescript.tsx",
  --     "vue",
  --   },
  --
  --   on_attach = function(client, bufnr)
  --     vim.keymap.set({ 'n', 'v' }, '<leader>ca', vim.lsp.buf.code_action, { buffer = true })
  --     client.server_capabilities.documentFormattingProvider = false
  --     client.server_capabilities.documentRangeFormattingProvider = false
  --
  --     -- vim.lsp.semantic_tokens.force_refresh()
  --   end,
  --
  --   settings = {
  --     -- spawn additional tsserver instance to calculate diagnostics on it
  --     separate_diagnostic_server = true,
  --     -- "change"|"insert_leave" determine when the client asks the server about diagnostic
  --     publish_diagnostic_on = "insert_leave",
  --     -- array of strings("fix_all"|"add_missing_imports"|"remove_unused"|
  --     -- "remove_unused_imports"|"organize_imports") -- or string "all"
  --     -- to include all supported code actions
  --     -- specify commands exposed as code_actions
  --     expose_as_code_action = { "add_missing_imports", "remove_unused", "remove_unused_imports", "organize_imports" },
  --     -- string|nil - specify a custom path to `tsserver.js` file, if this is nil or file under path
  --     -- not exists then standard path resolution strategy is applied
  --     tsserver_path = nil,
  --     -- specify a list of plugins to load by tsserver, e.g., for support `styled-components`
  --     -- (see `styled-components` support section)
  --     tsserver_plugins = { "@vue/typescript-plugin" },
  --     -- this value is passed to: https://nodejs.org/api/cli.html#--max-old-space-sizesize-in-megabytes
  --     -- memory limit in megabytes or "auto"(basically no limit)
  --     tsserver_max_memory = "auto",
  --     -- described below
  --     tsserver_format_options = {},
  --     tsserver_file_preferences = {
  --       allowRenameOfImportPath = true,
  --       allowTextChangesInNewFiles = true,
  --       importModuleSpecifierEnding = 'minimal',
  --       importModuleSpecifierPreference = 'non-relative',
  --       includeAutomaticOptionalChainCompletions = true,
  --       includeCompletionsForImportStatements = true,
  --       includeCompletionsForModuleExports = true,
  --       includeCompletionsWithClassMemberSnippets = true,
  --       includeCompletionsWithInsertText = true,
  --       includeCompletionsWithObjectLiteralMethodSnippets = true,
  --       includeCompletionsWithSnippetText = true,
  --       includeInlayEnumMemberValueHints = true,
  --       includeInlayFunctionLikeReturnTypeHints = false,
  --       includeInlayFunctionParameterTypeHints = true,
  --       includeInlayParameterNameHints = 'all',
  --       includeInlayParameterNameHintsWhenArgumentMatchesName = false,
  --       includeInlayPropertyDeclarationTypeHints = true,
  --       includeInlayVariableTypeHints = false,
  --       includeInlayVariableTypeHintsWhenTypeMatchesName = false,
  --       interactiveInlayHints = true,
  --       provideRefactorNotApplicableReason = true,
  --       quotePreference = 'single',
  --       useLabelDetailsInCompletionEntries = true,
  --     },
  --     -- locale of all tsserver messages, supported locales you can find here:
  --     -- https://github.com/microsoft/TypeScript/blob/3c221fc086be52b19801f6e8d82596d04607ede6/src/compiler/utilitiesPublic.ts#L620
  --     tsserver_locale = "en",
  --     -- mirror of VSCode's `typescript.suggest.completeFunctionCalls`
  --     complete_function_calls = true,
  --     include_completions_with_insert_text = true,
  --     -- CodeLens
  --     -- WARNING: Experimental feature also in VSCode, because it might hit performance of server.
  --     -- possible values: ("off"|"all"|"implementations_only"|"references_only")
  --     code_lens = "off",
  --     -- by default code lenses are displayed on all referencable values and for some of you it can
  --     -- be too much this option reduce count of them by removing member references from lenses
  --     disable_member_code_lens = true,
  --     -- JSXCloseTag
  --     -- WARNING: it is disabled by default (maybe you configuration or distro already uses nvim-ts-autotag,
  --     -- that maybe have a conflict if enable this feature. )
  --     jsx_close_tag = {
  --       enable = false,
  --       filetypes = { "javascriptreact", "typescriptreact" },
  --     }
  --   },
  -- },
  -- -- config = function()
  -- --   require("typescript-tools").setup {
  -- --     on_attach = function(client, bufnr)
  -- --       vim.keymap.set({ 'n', 'v' }, '<leader>ca', vim.lsp.buf.code_action, { buffer = true })
  -- --       client.server_capabilities.documentFormattingProvider = false
  -- --       client.server_capabilities.documentRangeFormattingProvider = false
  --
  -- --       -- vim.lsp.semantic_tokens.force_refresh(bufnr)
  --
  -- --       -- if client.server_capabilities.inlayHintProvider then
  -- --       --   local inlay_hints_group = vim.api.nvim_create_augroup('InlayHints', { clear = false })
  --
  -- --       --   -- Initial inlay hint display.
  -- --       --   local mode = vim.api.nvim_get_mode().mode
  -- --       --   vim.lsp.inlay_hint.enable(mode == 'n' or mode == 'v', { bufnr })
  --
  -- --       --   vim.api.nvim_create_autocmd('InsertEnter', {
  -- --       --     group = inlay_hints_group,
  -- --       --     buffer = bufnr,
  -- --       --     callback = function()
  -- --       --       vim.lsp.inlay_hint.enable(false, { bufnr })
  -- --       --     end,
  -- --       --   })
  -- --       --   vim.api.nvim_create_autocmd('InsertLeave', {
  -- --       --     group = inlay_hints_group,
  -- --       --     buffer = bufnr,
  -- --       --     callback = function()
  -- --       --       vim.lsp.inlay_hint.enable(true, { bufnr })
  -- --       --     end,
  -- --       --   })
  -- --       -- end
  -- --     end,
  -- --   }
  -- -- end
}
